const sendBtn = document.getElementById('send-btn');
const inputArea = document.getElementById('input-area');
const userInput = document.getElementById('user-input');
const chatWindow = document.getElementById('chat-window');
const loader = document.createElement('div');
const toggleBtn = document.getElementById('toggleSidebar');
const sidebar = document.getElementById('sidebar');
const closeBtn = document.getElementById('closeSidebar');

loader.classList.add('loader');

document.querySelector('#closeModal').addEventListener('click', () => {
  document.querySelector('#imgModal').style.display = "none";
})
let previewerIframe = null;
let chatHistory = [{
    "role": "system",
    "content": "Conversation started"
  }];
const agentEP = 'http://localhost:8081/api/agents';
// const agentEP = 'https://2133-49-207-235-196.ngrok-free.app/api/agents';

sendBtn.addEventListener('click', () => {
  userInput.placeholder = "Ready when you are...";
  sendMessage();
});

userInput.addEventListener('keypress', (e) => {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    sendMessage();
  }
});

toggleBtn.addEventListener('click', () => {
  const isOpen = sidebar.classList.contains('open');

  if (isOpen) {
    sidebar.classList.remove('open');
    toggleBtn.innerHTML = '<svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-layout-sidebar"><path d="M4 4m0 2a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2z" /><path d="M9 4l0 16" /></svg>';
    toggleBtn.style.left = '10px';
  } else {
    sidebar.classList.add('open');
    toggleBtn.textContent = '✕';
    toggleBtn.style.left = '200px';
  }
});

function sendMessage() {
  document.querySelector(".chat-window").style.display = "flex";
  document.querySelector(".input-area").classList.add('to-bottom');
  document.querySelector('.card-section')?.remove();
  if (!inputArea.classList.contains('to-bottom')) inputArea.classList.add('to-bottom');
  const message = userInput.value.trim();
  if (!message) return;
  appendMessage(message, 'user');
  handleChatInteraction();
}

function linkify(text) {
  const urlRegex = /https?:\/\/[^\s]+/g;
  return text.replace(urlRegex, function(url) {
    return `<a href="${url}" target="_blank"">${url}</a>`;
  });
}

function appendMessage(text, sender, hasMarkdown = false) {
  const msg = document.createElement('div');
  msg.className = `message ${sender}`;
  if (hasMarkdown) {
    if (text.includes('```')) {
      text = text.replace('`', '');
      text = text.replace('markdown', '');
    }
    msg.innerHTML = marked.parse(text);
  }
  else {
    msg.innerHTML = linkify(text);
  }
  
  if (sender == "bot" && hasMarkdown) {
    document.querySelector('div[contentEditable="true"]')?.removeAttribute('contentEditable');
    d = document.createElement("div");
    d.classList.add("icon");
    d.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm-2 14-3 1 1-3 7-7 2 2z"/></svg>`;
    msg.prepend(d);
    d.addEventListener('click', () => {
      msg.contentEditable = true;
      msg.addEventListener('blur', () => {
        const turndownService = new TurndownService();
        const markdown = turndownService.turndown(msg.innerHTML);
        const updatedMessage = markdown.trim();
        if (updatedMessage !== text) {
          chatHistory[chatHistory.length - 1].content = updatedMessage;
        }
        msg.contentEditable = false;
      });
    });
  }
  chatWindow.appendChild(msg);
  msg.scrollIntoView({
    behavior: 'smooth'
  });
  loader.remove();
}

function appendImageThumbnail(src, sender) {
  const img = document.createElement('img');
  img.src = src
  const msg = document.createElement('div');
  msg.className = `message ${sender} has-thumbnails`;
  msg.append(img);
  chatWindow.appendChild(msg);
  img.addEventListener('click', (e) => {
    document.querySelector('#imgModal').querySelector('img').src = src;
    document.querySelector('#imgModal').style.display = 'flex';
  });
}

function appendiFrameMessage(link, sender, generateContent = false) {
  const msg = document.createElement('div');
  msg.className = `message ${sender} has-iframe`;
  previewerIframe = document.createElement('iframe');
  previewerIframe.src = `${link}&martech=off`;
  msg.append(previewerIframe);
  chatWindow.appendChild(msg);
  msg.scrollIntoView({
    behavior: 'smooth'
  });
  loader.remove();
  if (!generateContent) return;

  const disclaimerText = document.createElement('div');
  disclaimerText.classList.add('disclaimer');
  disclaimerText.innerHTML = "* Disclaimer - These images are generated by firefly";
  msg.append(disclaimerText);

  window.addEventListener('message', (event) => {
    if (event.data.hasOwnProperty('iframeReady')) {
      previewerIframe.contentWindow.postMessage({
          chatContext: "Setting chat context",
      }, '*');
    }
  });
}

async function handleChatInteraction() {
    const inputBox = window["user-input"];
    const newMessages = inputBox.value.trim();
    chatHistory.push({
      "role": "user",
      "content": newMessages
    });
    inputBox.value = "";
    const chatPayload = {
      "message": JSON.stringify(chatHistory)
    };

    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(chatPayload)
    };

    chatWindow.append(loader);
    loader.scrollIntoView({
      behavior: 'smooth'
    });

    try {
      const res = await fetch(`${agentEP}/chat`, options);
      const { response } = await res.json();
      
      if (response.hasOwnProperty('message')) {
          appendMessage(response.message, 'bot', response.hasOwnProperty('hasMarkdown'));
          chatHistory.push({
            "role": "system",
            "content": response.message
          });
      }
      if (response.hasOwnProperty('previewerUrl')) {
        appendiFrameMessage(response.previewerUrl, 'bot', response.generateContent);
      }
      if (response.hasOwnProperty('thumbnail')) {
        appendImageThumbnail(`${response.thumbnail}`, 'bot');
      }
      console.log(chatHistory);
    } catch (err) {
        appendMessage(`⚠️ Well, that didn’t go as planned. Give it another go?.`, 'bot');
    }
}

(() => {

    window.addEventListener("message", async (e) => {
      const eventData = e.data;
      let blockNames = "";
      if (eventData.hasOwnProperty('blockList')) {
        blockNames = eventData;
      } else {
        return;
      }
      console.log(blockNames);
      chatHistory.push({
        "role": "user",
        "content": 'Generate content for da page for the following block list'
      });
      chatHistory.push({
        "role": "user",
        "content": blockNames
      });

      const chatPayload = {
        "message": JSON.stringify(chatHistory)
      };
      console.log(chatHistory)

    try {
      const options = {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(chatPayload)
      };

      let iterCount = 0;
      const idRes = await fetch(`${agentEP}/create-content`, options);
      let { id } = await idRes.json();

      async function tryToLoadContent(id) {
        try {

          const contentOptions = {
            method: 'GET',
            headers: {'Content-Type': 'application/json'}
          };

          const contentRes = await fetch(`${agentEP}/fetch-content/${id}`, contentOptions);
          const { content } = await contentRes.json();
          iterCount += 1
          if(iterCount > 30) throw new Error('Something went wrong while generating content!');
          if(Object.keys(content).length === 0) setTimeout( () => { tryToLoadContent(id); }, 15000);
          else previewerIframe.contentWindow.postMessage({ generativeContent: content}, '*');
        } catch (err) {
          console.log(err);
          previewerIframe.contentWindow.postMessage({ generativeContent: {}}, '*');
          appendMessage(`⚠️ Our content muse took a coffee break. Give it another go?.`, 'bot');
        }
      }
      tryToLoadContent(id);
    } catch (err) {
      console.log(err);
      previewerIframe.contentWindow.postMessage({ generativeContent: {}}, '*');
      appendMessage(`⚠️ Our content muse took a coffee break. Give it another go?.`, 'bot');
    }
  });

  document.querySelectorAll('.card').forEach(c => {
    if (c.querySelector(".card-overlay")) return;
    const staticSrc = c.querySelector('img').src;
    const gifSrc = c.querySelector('img').getAttribute('data-gif');

    c.addEventListener('mouseenter', () => {
      c.querySelector('img').src = gifSrc;
    });

    c.addEventListener('mouseleave', () => {
      c.querySelector('img').src = staticSrc;
    });

    c.addEventListener('click', (e) => {
      c.closest(".chat-wrapper").querySelector(".chat-window").style.display = "flex";
      c.closest(".chat-wrapper").querySelector(".input-area").classList.add('to-bottom');
      let cardQuestion = null;
      let cardPlaceholder = null;
      if (e.target.classList.contains('card')) {
        cardQuestion = e.target?.dataset?.question;
        cardPlaceholder =  e.target?.dataset?.placeholder;
      }
      else cardQuestion = e.target?.closest('.card')?.dataset?.question;
      if (cardQuestion) appendMessage(cardQuestion, 'bot');
      if (cardPlaceholder) userInput.placeholder = cardPlaceholder;
      c.closest(".card-section").remove();
    });
  });
})();
